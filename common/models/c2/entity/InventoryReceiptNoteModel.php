<?php

namespace common\models\c2\entity;

use backend\models\c2\entity\rbac\BeUser;
use common\helpers\CodeGenerator;
use common\models\c2\statics\InventoryExeState;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\helpers\ArrayHelper;
use yii\validators\RequiredValidator;

/**
 * This is the model class for table "{{%inventory_receipt_note}}".
 *
 * @property string $id
 * @property integer $type
 * @property string $code
 * @property string $label
 * @property string $warehouse_id
 * @property string $supplier_id
 * @property string $arrival_date
 * @property string $occurrence_date
 * @property string $arrival_number
 * @property string $buyer_name
 * @property string $dept_manager_name
 * @property string $financial_name
 * @property string $receiver_name
 * @property string $memo
 * @property string $remote_ip
 * @property string $updated_by
 * @property string $created_by
 * @property integer $state
 * @property integer $status
 * @property integer $position
 * @property string $updated_at
 * @property string $created_at
 */
class InventoryReceiptNoteModel extends \cza\base\models\ActiveRecord
{
    public $items;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%inventory_receipt_note}}';
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            BlameableBehavior::className()
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['warehouse_id', 'supplier_id', 'updated_by', 'created_by', 'position'], 'integer'],
            [['arrival_date', 'occurrence_date', 'updated_at', 'created_at'], 'safe'],
            [['memo'], 'string'],
            [['items'], 'validateItems'],
            [['type', 'state', 'status'], 'integer', 'max' => 4],
            [['code', 'label', 'arrival_number', 'buyer_name', 'dept_manager_name', 'financial_name', 'receiver_name',
                'remote_ip'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app.c2', 'ID'),
            'type' => Yii::t('app.c2', 'Type'),
            'code' => Yii::t('app.c2', 'Code'),
            'label' => Yii::t('app.c2', 'Label'),
            'warehouse_id' => Yii::t('app.c2', 'Warehouse'),
            'supplier_id' => Yii::t('app.c2', 'Supplier'),
            'arrival_date' => Yii::t('app.c2', 'Arrival Date'),
            'occurrence_date' => Yii::t('app.c2', 'Occurrence Date'),
            'arrival_number' => Yii::t('app.c2', 'Arrival Number'),
            'buyer_name' => Yii::t('app.c2', 'Buyer Name'),
            'dept_manager_name' => Yii::t('app.c2', 'Dept Manager Name'),
            'financial_name' => Yii::t('app.c2', 'Financial Name'),
            'receiver_name' => Yii::t('app.c2', 'Receiver Name'),
            'memo' => Yii::t('app.c2', 'Memo'),
            'remote_ip' => Yii::t('app.c2', 'Remote Ip'),
            'updated_by' => Yii::t('app.c2', 'Updated By'),
            'created_by' => Yii::t('app.c2', 'Created By'),
            'state' => Yii::t('app.c2', 'State'),
            'status' => Yii::t('app.c2', 'Status'),
            'position' => Yii::t('app.c2', 'Position'),
            'updated_at' => Yii::t('app.c2', 'Updated At'),
            'created_at' => Yii::t('app.c2', 'Created At'),
        ];
    }

    /**
     * @inheritdoc
     * @return \common\models\c2\query\InventoryReceiptNoteQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\c2\query\InventoryReceiptNoteQuery(get_called_class());
    }
    
    /**
    * setup default values
    **/
    public function loadDefaultValues($skipIfSet = true) {
        parent::loadDefaultValues($skipIfSet);
        if ($this->isNewRecord) {
            $this->code = CodeGenerator::getCodeByDate($this, 'RN');
        }
    }

    public function validateItems($attribute)
    {
        $items = $this->$attribute;

        foreach ($items as $index => $row) {
            $requiredValidator = new RequiredValidator();
            $error = null;
            $requiredValidator->validate($row['product_id'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][product_id]';
                $this->addError($key, $error);
            }
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        InventoryNoteLogModel::logReceiptNote([
            'note_id' => $this->id,
            'warehouse_id' => $this->warehouse_id,
            'occurrence_date' => $this->occurrence_date,
            'memo' => $this->memo,
        ]);
        if (!empty($this->items)) {
            foreach ($this->items as $item) {
                $untilPrice = isset($item['until_price']) ? $item['until_price'] : 0;
                $number = isset($item['number']) ? $item['number'] : 0;
                $attributes = [
                    'product_id' => isset($item['product_id']) ? $item['product_id'] : 0,
                    'code' => isset($item['code']) ? $item['code'] : "",
                    'name' => isset($item['name']) ? $item['name'] : "",
                    'label' => isset($item['label']) ? $item['label'] : "",
                    'value' => isset($item['value']) ? $item['value'] : "",
                    'supplier_id' => $this->supplier_id,
                    'measure_id' => isset($item['measure_id']) ? $item['measure_id'] : 0,
                    'until_price' => $untilPrice,
                    'number' => $number,
                    'subtotal' => isset($item['subtotal']) ? $item['subtotal'] : $untilPrice * $number,
                    'memo' => isset($item['memo']) ? $item['memo'] : 0,
                ];
                if (isset($item['id']) && $item['id'] == '') {
                    $itemModel = new InventoryReceiptNoteItemModel();
                    $itemModel->setAttributes($attributes);
                    $itemModel->link('owner', $this);
                } elseif (isset($item['id'])) {
                    $itemModel = InventoryReceiptNoteItemModel::findOne($item['id']);
                    if (!is_null($item)) {
                        $itemModel->updateAttributes($attributes);
                    }
                }
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getWarehouse()
    {
        return $this->hasOne(WarehouseModel::className(), ['id' => 'warehouse_id']);
    }

    public function getSupplier()
    {
        return $this->hasOne(SupplierModel::className(), ['id' => 'warehouse_id']);
    }

    public function getCreator()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'created_by']);
    }

    public function getNoteItems()
    {
        return $this->hasMany(InventoryReceiptNoteItemModel::className(), ['note_id' => 'id']);
    }

    public function getWarehouseCommitItems()
    {
        return $this->hasMany(WarehouseCommitItemModel::className(), ['note_id' => 'id']);
    }

    public function loadItems()
    {
        $this->items = $this->getNoteItems()->all();
    }

    public function loadWarehouseCommitItems()
    {
        $this->items = $this->getWarehouseCommitItems()->all();
    }

    public function isStateInit()
    {
        return ($this->state == InventoryExeState::INIT);
    }

    public function isStateUntrack()
    {
        return ($this->state == InventoryExeState::UNTRACK);
    }

    public function isStateCancel()
    {
        return ($this->state == InventoryExeState::CANCEL);
    }

    public function isStateFinish()
    {
        return ($this->state == InventoryExeState::FINISH);
    }

    public function setStateToUntrack()
    {
        $items = $this->getNoteItems()->all();
        foreach ($items as $item) {
            $attributes = [
                'note_id' => $item->note_id,
                'product_id' => $item->product_id,
                'code' => $item->code,
                'name' => $item->name,
                'label' => $item->label,
                'value' => $item->value,
                'number' => $item->number,
                'measure_id' => $item->measure_id,
                'memo' => $item->memo,
            ];
            $model = new WarehouseCommitItemModel();
            $model->setAttributes($attributes);
            $model->save();
        }
        $this->updateAttributes(['state' => InventoryExeState::UNTRACK]);
    }

    public function setStateToCancel()
    {
        $items = $this->getWarehouseCommitItems()->all();
        foreach ($items as $item) {
            $item->delete();
        }
        $this->updateAttributes(['state' => InventoryExeState::CANCEL]);
    }

    public function setStateToInit()
    {
        $this->updateAttributes(['state' => InventoryExeState::INIT]);
    }

    public function commitWarehouseItems()
    {
        foreach ($this->getWarehouseCommitItems()->all() as $item) {
            $productStockModel = $item->productStock;
            $productStockModel->updateCounters([
                'number' => $item->number
            ]);
        }
        $this->updateAttributes(['state' => InventoryExeState::FINISH]);
        return true;
    }

}
