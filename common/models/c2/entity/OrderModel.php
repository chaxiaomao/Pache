<?php

namespace common\models\c2\entity;

use backend\models\c2\entity\rbac\BeUser;
use backend\models\c2\entity\rbac\BeUserProfile;
use common\models\c2\statics\InventoryExeState;
use cza\base\models\statics\EntityModelStatus;
use Yii;
use yii\validators\RequiredValidator;
use yiiunit\extensions\redis\data\ar\OrderItem;

/**
 * This is the model class for table "{{%order}}".
 *
 * @property string $id
 * @property string $user_id
 * @property string $code
 * @property string $label
 * @property string $production_date
 * @property string $delivery_date
 * @property string $created_by
 * @property string $updated_by
 * @property string $memo
 * @property integer $state
 * @property integer $status
 * @property integer $position
 * @property string $created_at
 * @property string $updated_at
 */
class OrderModel extends \cza\base\models\ActiveRecord
{
    public $items;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%order}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'created_by', 'updated_by', 'position'], 'integer'],
            [['production_date', 'delivery_date', 'created_at', 'updated_at'], 'safe'],
            [['label', 'memo', 'code'], 'string', 'max' => 255],
            [['items'], 'validateItems'],
            [['state', 'status'], 'integer', 'max' => 4],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app.c2', 'ID'),
            'user_id' => Yii::t('app.c2', 'Customer'),
            'code' => Yii::t('app.c2', 'Order Code'),
            'label' => Yii::t('app.c2', 'Label'),
            'production_date' => Yii::t('app.c2', 'Production Date'),
            'delivery_date' => Yii::t('app.c2', 'Delivery Date'),
            'created_by' => Yii::t('app.c2', 'Created By'),
            'updated_by' => Yii::t('app.c2', 'Updated By'),
            'memo' => Yii::t('app.c2', 'Memo'),
            'state' => Yii::t('app.c2', 'State'),
            'status' => Yii::t('app.c2', 'Status'),
            'position' => Yii::t('app.c2', 'Position'),
            'created_at' => Yii::t('app.c2', 'Created At'),
            'updated_at' => Yii::t('app.c2', 'Updated At'),
        ];
    }

    public function behaviors()
    {
        return \yii\helpers\ArrayHelper::merge(parent::behaviors(), [
            \yii\behaviors\BlameableBehavior::className(), // record created_by and updated_by
        ]);
    }

    /**
     * @inheritdoc
     * @return \common\models\c2\query\OrderQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\c2\query\OrderQuery(get_called_class());
    }

    /**
     * setup default values
     **/
    public function loadDefaultValues($skipIfSet = true)
    {
        parent::loadDefaultValues($skipIfSet);
        if ($this->isNewRecord) {
            $this->state = InventoryExeState::INIT;
        }
    }

    public function validateItems($attribute)
    {
        $items = $this->$attribute;

        foreach ($items as $index => $row) {
            $requiredValidator = new RequiredValidator();
            $error = null;
            $requiredValidator->validate($row['product_id'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][product_id]';
                $this->addError($key, $error);
            }
        }
    }

    public function getOrderItems()
    {
        return $this->hasMany(OrderItemModel::className(), ['order_id' => 'id']);
    }

    public function loadItems()
    {
        $this->items = $this->getOrderItems()->all();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if (!empty($this->items)) {
            foreach ($this->items as $item) {
                $attributes = [
                    'product_id' => isset($item['product_id']) ? $item['product_id'] : 0,
                    'label' => isset($item['label']) ? $item['label'] : "",
                    'product_combination_id' => isset($item['product_combination_id']) ? $item['product_combination_id'] : 0,
                    'product_package_id' => isset($item['product_package_id']) ? $item['product_package_id'] : 0,
                    'measure_id' => isset($item['measure_id']) ? $item['measure_id'] : 0,
                    'number' => isset($item['number']) ? $item['number'] : 1,
                    'memo' => isset($item['memo']) ? $item['memo'] : "",
                ];
                if (isset($item['id']) && $item['id'] == '') {
                    $itemModel = new OrderItemModel();
                    $itemModel->setAttributes($attributes);
                    $itemModel->link('owner', $this);
                } elseif (isset($item['id'])) {
                    $itemModel = OrderItemModel::findOne($item['id']);
                    if (!is_null($item)) {
                        $itemModel->updateAttributes($attributes);
                    }
                }
            }
        }
    }

    public function getUser()
    {
        return $this->hasOne(FeUserModel::className(), ['id' => 'user_id']);
    }

    public function getOrderItemConsumption()
    {
        return $this->hasMany(OrderItemConsumptionModel::className(), ['order_id' => 'id']);
    }

    public function getCreator()
    {
        return $this->hasOne(BeUser::className(), ['id' => 'created_by']);
    }

    public function isStateInit()
    {
        return ($this->state == InventoryExeState::INIT);
    }

    public function isStateUntrack()
    {
        return ($this->state == InventoryExeState::UNTRACK);
    }

    public function isStateCancel()
    {
        return ($this->state == InventoryExeState::CANCEL);
    }

    public function setStateToCancel()
    {
        foreach ($this->getOrderItems()->all() as $item) {
            $item->updateAttributes([
                'status' => EntityModelStatus::STATUS_INACTIVE
            ]);
        }
        foreach ($this->getOrderItemConsumption()->all() as $item) {
            $item->delete();
        }
        $this->updateAttributes([
            'state' => InventoryExeState::CANCEL
        ]);
    }

    public function setStateToInit()
    {
        foreach ($this->getOrderItems()->all() as $item) {
            $item->updateAttributes([
                'status' => EntityModelStatus::STATUS_ACTIVE
            ]);
        }
        $this->updateAttributes([
            'state' => InventoryExeState::INIT
        ]);
    }

    public function setStateToUntrack()
    {
        foreach ($this->orderItems as $orderItem) {
            // get product combination's items
            foreach ($orderItem->productCombination->productCombinationItems as $productCombinationItem) {
                $product_num = $orderItem->getSummerProduct();
                $attributes = [
                    'order_id' => $this->id,
                    'order_item_id' => $orderItem->id,
                    'product_id' => $productCombinationItem->product_id,
                    'product_number' => $product_num,
                    'consumed_number' => $productCombinationItem->number,
                    'subtotal' => $productCombinationItem->number * $product_num,
                    'memo' => "",
                ];
                $consumptionModel = new OrderItemConsumptionModel();
                $consumptionModel->setAttributes($attributes);
                $consumptionModel->save();
            }

            // get product package's items
            foreach ($orderItem->productPackage->productPackageItems as $productPackageItem) {
                $attributes = [
                    'order_id' => $this->id,
                    'order_item_id' => $orderItem->id,
                    'product_id' => $productPackageItem->product_id,
                    'product_number' => $orderItem->number,
                    'consumed_number' => $productPackageItem->number,
                    'subtotal' => $productPackageItem->number * $orderItem->number,
                    'memo' => "",
                ];
                $consumptionModel = new OrderItemConsumptionModel();
                $consumptionModel->setAttributes($attributes);
                $consumptionModel->save();
            }
        }
        $this->updateAttributes([
            'state' => InventoryExeState::UNTRACK
        ]);
    }

    public function setStateToFinish()
    {
        foreach ($this->getOrderItems()->all() as $item) {
            $item->updateAttributes([
                'status' => EntityModelStatus::STATUS_INACTIVE
            ]);
        }
        foreach ($this->getOrderItemConsumption()->all() as $item) {
            $item->updateAttributes([
                'status' => EntityModelStatus::STATUS_INACTIVE
            ]);
        }
        $this->updateAttributes([
            'state' => InventoryExeState::FINISH
        ]);
    }

    public function beforeDelete()
    {
        foreach ($this->getOrderItems()->all() as $item) {
            $item->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

}
