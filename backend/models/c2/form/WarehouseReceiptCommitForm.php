<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/4/18
 * Time: 23:09
 */

namespace backend\models\c2\form;


use common\models\c2\entity\InventoryReceiptNoteItemModel;
use common\models\c2\entity\WarehouseReceiptCommitItemModel;
use cza\base\models\ModelTrait;
use Yii;
use yii\base\Model;
use yii\validators\RequiredValidator;

class WarehouseReceiptCommitForm extends Model
{
    use ModelTrait;

    public $items;

    public $entityModel = null;

    public function formName()
    {
        return 'InventoryReceiptNoteModel';
    }

    public function rules()
    {
        return [
            // [['code',], 'unique'],
            // [['code', 'warehouse_id', 'arrival_number', 'supplier_id', 'occurrence_date'], 'required'],
            // [['type', 'warehouse_id', 'supplier_id', 'updated_by', 'created_by', 'position'], 'integer'],
            // [['occurrence_date', 'arrival_date', 'updated_at', 'created_at'], 'safe'],
            // [['memo'], 'string'],
            [['items',], 'validateItems'],
            // [['state', 'status'], 'integer', 'max' => 4],
            // [['code', 'label', 'arrival_number', 'buyer_name', 'dept_manager_name', 'financial_name', 'receiver_name', 'remote_ip'], 'string', 'max' => 255],
        ];
    }

    public function validateItems($attribute)
    {
        $requiredValidator = new RequiredValidator();
        foreach ($this->$attribute as $index => $row) {
            $error = null;
            $requiredValidator->validate($row['product_id'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][product_id]';
                $this->addError($key, Yii::t('app.c2', '{attribute} can not be empty!', ['attribute' => Yii::t('app.c2', 'Product')]));
            }
            $requiredValidator->validate($row['product_sku_id'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][product_sku_id]';
                $this->addError($key, Yii::t('app.c2', '{attribute} can not be empty!', ['attribute' => Yii::t('app.c2', 'Product Sku')]));
            }
        }
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        // if (is_null($this->entityModel)) {
        //     throw new \yii\web\NotFoundHttpException("EntityModel is required!");
        // }
        // $this->entityModel->refresh();
    }

    public function save()
    {
        if (!empty($this->items)) {
            foreach ($this->items as $item) {
                $attributes = [
                    'product_id' => isset($item['product_id']) ? $item['product_id'] : 0,
                    'product_sku_id' => isset($item['product_sku_id']) ? $item['product_sku_id'] : 0,
                    // 'sku_label' => isset($item['sku_label']) ? $item['sku_label'] : "",
                    'measure_id' => isset($item['measure_id']) ? $item['measure_id'] : 0,
                    'quantity' => isset($item['quantity']) ? $item['quantity'] : 0,
                    // 'until_price' => $item['until_price'],
                    // 'subtotal' => $item['subtotal'],
                    'supplier_id' => $this->entityModel->supplier_id,
                    'memo' => isset($item['memo']) ? $item['memo'] : "",
                ];
                if (isset($item['id']) && $item['id'] == 0) {  // create new items
                    $itemModel = new WarehouseReceiptCommitItemModel();
                    $itemModel->setAttributes($attributes);
                    $itemModel->link('owner', $this->entityModel);
                } elseif (isset($item['id'])) {  // update itemes
                    $itemModel = WarehouseReceiptCommitItemModel::findOne(['id' => $item['id']]);
                    if (!is_null($itemModel)) {
                        $itemModel->updateAttributes($attributes);
                    }
                }
            }
        }
        return true;
    }

}