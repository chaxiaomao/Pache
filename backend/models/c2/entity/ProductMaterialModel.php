<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/4/12
 * Time: 20:12
 */

namespace backend\models\c2\entity;

use common\models\c2\entity\ProductMaterialItemModel;
use common\models\c2\statics\ProductType;
use Yii;
use yii\validators\RequiredValidator;

class ProductMaterialModel extends \common\models\c2\entity\ProductModel
{

    public $items;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['items',], 'validateItems'],
        ];
    }

    public function getMaterialItems()
    {
        return $this->hasMany(ProductMaterialItemModel::className(), ['product_id' => 'id'])->orderBy(['position' => SORT_DESC]);
    }

    public function loadItems()
    {
        $this->items = $this->getMaterialItems()->all();
    }

    public function loadDefaultValues($skipIfSet = true)
    {
        parent::loadDefaultValues($skipIfSet); // TODO: Change the autogenerated stub
        $this->type = ProductType::TYPE_MATERIAL;
    }


    public function validateItems($attribute) {
        $requiredValidator = new RequiredValidator();

        foreach ($this->$attribute as $index => $row) {
            $error = null;
            $requiredValidator->validate($row['label'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][label]';
                $this->addError($key, $error);
            }
            $requiredValidator->validate($row['value'], $error);
            if (!empty($error)) {
                $key = $attribute . '[' . $index . '][value]';
                $this->addError($key, $error);
            }
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->type == ProductType::TYPE_MATERIAL) {
            // Yii::info($this->items);
            foreach ($this->items as $item) {
                $attributes = [
                    'product_id' => $this->id,
                    'code' => isset($item['code']) ? $item['code'] : "",
                    'name' => isset($item['name']) ? $item['name'] : "",
                    'label' => isset($item['label']) ? $item['label'] : "",
                    'value' => isset($item['value']) ? $item['value'] : "",
                    // 'num' => isset($item['num']) ? $item['num'] : 0,
                    // 'is_selected' => isset($item['is_selected']) ? $item['is_selected'] : 0,
                    'position' => isset($item['position']) ? $item['position'] : 50,
                ];
                if (isset($item['id']) && $item['id'] == '') {  // create new items
                    $itemModel = new ProductMaterialItemModel();
                    $itemModel->setAttributes($attributes);
                    $itemModel->link('owner', $this);
                } elseif (isset($item['id'])) {  // update itemes
                    $itemModel = ProductMaterialItemModel::findOne(['id' => $item['id']]);
                    if (!is_null($itemModel)) {
                        $itemModel->updateAttributes($attributes);
                    }
                }
            }
        }
    }

}